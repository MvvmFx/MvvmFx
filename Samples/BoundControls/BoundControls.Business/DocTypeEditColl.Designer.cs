//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocTypeEditColl
// ObjectType:  DocTypeEditColl
// CSLAType:    EditableRootCollection

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace BoundControls.Business
{

    /// <summary>
    /// DocTypeEditColl (editable root list).<br/>
    /// This is a generated base class of <see cref="DocTypeEditColl"/> business object.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="DocTypeEdit"/> objects.
    /// </remarks>
    [Serializable]
    public partial class DocTypeEditColl : BusinessBindingListBase<DocTypeEditColl, DocTypeEdit>
    {

        #region Find Methods

        /// <summary>
        /// Finds a <see cref="DocTypeEdit"/> item of the <see cref="DocTypeEditColl"/> collection, based on a given DocTypeID.
        /// </summary>
        /// <param name="docTypeID">The DocTypeID.</param>
        /// <returns>A <see cref="DocTypeEdit"/> object.</returns>
        public DocTypeEdit FindDocTypeEditByDocTypeID(int docTypeID)
        {
            for (var i = 0; i < this.Count; i++)
            {
                if (this[i].DocTypeID.Equals(docTypeID))
                {
                    return this[i];
                }
            }

            return null;
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DocTypeEditColl"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="DocTypeEditColl"/> collection.</returns>
        public static DocTypeEditColl NewDocTypeEditColl()
        {
            return DataPortal.Create<DocTypeEditColl>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DocTypeEditColl"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DocTypeEditColl"/> collection.</returns>
        public static DocTypeEditColl GetDocTypeEditColl()
        {
            var docTypeList = DataPortal.Fetch<DocTypeEditColl>();
            docTypeList.Add(LoadItem(21, 21, "Selfie", "Description 21", true)); //Selfie
            docTypeList.Add(LoadItem(10, 5, "Child 2.1.5 RO", "Description 10", true));
            docTypeList.Add(LoadItem(1, null, "A Root", "Description 1", false));
            docTypeList.Add(LoadItem(11, 4, "Child 1.2.1 RO", "Description 11", true));
            docTypeList.Add(LoadItem(16, 17, "Inexistant parent", "Description 16", true)); //Inexistant parent
            docTypeList.Add(LoadItem(2, null, "Z Another Root", "Description 2", false));
            docTypeList.Add(LoadItem(2, null, "DUPLICATE", "Description 2", false)); //Duplicate
            docTypeList.Add(LoadItem(3, 1, "Child 1.1", "Description 3", false));
            docTypeList.Add(LoadItem(4, 1, "Child 1.2 RO", "Description 4", true));
            docTypeList.Add(LoadItem(15, 2, "Child 2.4 RO", "Description 15", true));
            docTypeList.Add(LoadItem(6, 5, "Child 2.1.1", "Description 6", false));
            docTypeList.Add(LoadItem(7, 5, "Child 2.1.2 RO", "Description 7", true));
            docTypeList.Add(LoadItem(8, 5, "Child 2.1.3", "Description 8", false));
            docTypeList.Add(LoadItem(9, 5, "Child 2.1.4 RO", "Description 9", true));
            docTypeList.Add(LoadItem(5, 2, "Child 2.1", "Description 5", false));
            docTypeList.Add(LoadItem(12, 4, "Child 1.2.2 RO", "Description 12", true));
            docTypeList.Add(LoadItem(13, 2, "Child 2.2 RO", "Description 13", true));
            docTypeList.Add(LoadItem(14, 2, "Child 2.3", "Description 14", false));

            return docTypeList;
        }

        private static DocTypeEdit LoadItem(int docTypeID, int? docTypeParentID, string docTypeName, string docTypeDescription, bool docTypeIsReadOnly)
        {
            var item = DocTypeEdit.NewDocTypeEdit();
            item.DocTypeID = docTypeID;
            item.DocTypeParentID = docTypeParentID;
            item.DocTypeName = docTypeName;
            item.DocTypeDescription = docTypeDescription;
            item.DocTypeIsReadOnly = docTypeIsReadOnly;
            item.DocSubTypes.AddRange(DocSubTypeEditColl.GetDocSubTypeEditColl());

            return item;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocTypeEditColl"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        public DocTypeEditColl()
        {
            // Prevent direct creation

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = true;
            AllowEdit = true;
            AllowRemove = true;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        /*protected void DataPortal_Create()
        {
            
        }*/

        protected void DataPortal_Fetch()
        {
            
        }

    }
}
